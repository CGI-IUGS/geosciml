<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:xlink="http://www.w3.org/1999/xlink"

	xmlns:ss="urn:schemas-microsoft-com:office:spreadsheet"
	xmlns:msxsl="urn:schemas-microsoft-com:xslt"
	xmlns:skos="http://www.w3.org/2004/02/skos/core#"
	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"

	exclude-result-prefixes="xs ss msxsl"
>
	<xs:annotation>
		<xs:documentation>The mapping ruleset used for generating RDF/SKOS concept vocabularies from CGI GeoSciML vocabulary Microsoft Excel spreadsheets.</xs:documentation>
		<xs:appinfo>v1.0.0</xs:appinfo>
	</xs:annotation>
	<xsl:output method="xml" version="1.0" encoding="UTF-8" indent="yes" />

	<!--   This transformation is designed to work with an xml export from MS Excel workbook, with 2 worksheets.
	    First worksheet contains global variables. These are extracted in the first section of the template (below). Look at the cell 
		names in the xsl:variable statements to see the names that must be assigned to cells containing the variables. These cell 
		names are assigned in the spreadsheet using the Insert->Name->Define command from the Menu, with the appropriate cell selected.
	    Second worksheet contains data. Column headings in data must match the cell names you'll find in the variable assignments in the
		Row template (last template in this doc). Look at that template to see how the cell contents are mapped to elements in the SKOS -->
	

	<!-- Extract global vocabulary properties -->
	<xsl:variable name="_sheet_1" select="/ss:Workbook/ss:Worksheet[position() = 1]/ss:Table" />
	<xsl:variable name="ConceptScheme_prefLabel" select="normalize-space($_sheet_1//ss:Cell[ss:NamedCell[@ss:Name = 'ConceptScheme_prefLabel']]/ss:Data/text())" />
	<xsl:variable name="ConceptScheme_changeNote" select="normalize-space($_sheet_1//ss:Cell[ss:NamedCell[@ss:Name = 'ConceptScheme_changeNote']]/ss:Data/text())" />
	<xsl:variable name="ConceptScheme_changeNote_date" select="normalize-space($_sheet_1//ss:Cell[ss:NamedCell[@ss:Name = 'ConceptScheme_changeNote_date']]/ss:Data/text())" />
	<xsl:variable name="ConceptScheme_changeNote_creator" select="normalize-space($_sheet_1//ss:Cell[ss:NamedCell[@ss:Name = 'ConceptScheme_changeNote_creator']]/ss:Data/text())" />
	<xsl:variable name="ConceptScheme_editorialNote" select="normalize-space($_sheet_1//ss:Cell[ss:NamedCell[@ss:Name = 'ConceptScheme_editorialNote']]/ss:Data/text())" />
	<xsl:variable name="Classifier_Prefix" select="normalize-space($_sheet_1//ss:Cell[ss:NamedCell[@ss:Name = 'Classifier_Prefix']]/ss:Data/text())" />
	<xsl:variable name="ClassifierScheme_URN" select="normalize-space($_sheet_1//ss:Cell[ss:NamedCell[@ss:Name = 'ClassifierScheme_URN']]/ss:Data/text())" />
	<!-- <xsl:variable name="ConceptNotation_DataType" select="normalize-space($_sheet_1//ss:Cell[ss:NamedCell[@ss:Name = 'ConceptNotation_DataType']]/ss:Data/text())" /> -->
	<xsl:variable name="Version" select="normalize-space($_sheet_1//ss:Cell[ss:NamedCell[@ss:Name = 'Version']]/ss:Data/text())" />

	
	<xsl:template match="/">
		<rdf:RDF
			xmlns:skos="http://www.w3.org/2004/02/skos/core#"
			xmlns:dc="http://purl.org/dc/elements/1.1/"
			xmlns:owl="http://www.w3.org/2002/07/owl#"
			xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
			xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
		>
			<xsl:comment>==========================================================================</xsl:comment>
			<xsl:comment> Generated by XL2XML Framework (CSIRO).                                   </xsl:comment>
			<xsl:comment> -                                                                        </xsl:comment>
			<xsl:comment> CDTG XLS to SKOS ruleset, SMR revision </xsl:comment>
			<xsl:comment> Ruleset revision date: 2009-06-23   </xsl:comment>
			<xsl:comment> Ruleset author: Pavel Golodoniuc, CSIRO Exploration and Mining;
Modified by Stephen M Richard 2009-07-14			</xsl:comment>
			<xsl:comment> -                                                                        </xsl:comment>
			<xsl:comment> Content owned by originators.                                            </xsl:comment>
			<xsl:comment>==========================================================================</xsl:comment>

			<skos:ConceptScheme rdf:about="{ concat($ClassifierScheme_URN,':',$Version) }">
				<skos:prefLabel xml:lang="en">
					<xsl:value-of select="$ConceptScheme_prefLabel" />
				</skos:prefLabel>
				<skos:changeNote>
					<rdf:Description>
						<rdf:value>
							<xsl:value-of select="$ConceptScheme_changeNote" />
						</rdf:value>
						<dc:date>
							<xsl:value-of select="$ConceptScheme_changeNote_date" />
						</dc:date>
						<dc:creator>
							<xsl:value-of select="$ConceptScheme_changeNote_creator" />
						</dc:creator>
					</rdf:Description>
				</skos:changeNote>
				<skos:editorialNote>
					<xsl:value-of select="$ConceptScheme_editorialNote" />
				</skos:editorialNote>
			</skos:ConceptScheme>

			<!-- Populate dictionary with data -->
			<xsl:variable name="columns">
				<xsl:apply-templates select="(//ss:Table)[2]/ss:Row[1]/ss:Cell" />
			</xsl:variable>
			<xsl:variable name="data">
				<xsl:apply-templates select="(//ss:Table)[2]/ss:Row[position() &gt; 1]">
					<xsl:with-param name="columns" select="msxsl:node-set($columns)" />
				</xsl:apply-templates>
			</xsl:variable>
			<xsl:apply-templates select="msxsl:node-set($data)/Row" />
		</rdf:RDF>
	</xsl:template>

	<xsl:template match="ss:Row">
		<xsl:param name="columns" />
		<Row>
			<xsl:apply-templates select="ss:Cell">
				<xsl:with-param name="columns" select="$columns" />
			</xsl:apply-templates>
		</Row>
	</xsl:template>

	<xsl:template match="ss:Cell">
		<xsl:param name="columns" />
		<xsl:variable name="id" select="generate-id()" />
		<xsl:variable name="el" select="preceding-sibling::ss:Cell[@ss:Index][position() = 1]" />
		<xsl:variable name="index">
			<xsl:choose>
				<xsl:when test="@ss:Index">
					<xsl:value-of select="@ss:Index" />
				</xsl:when>
				<xsl:when test="$el">
					<xsl:value-of select="count($el/following-sibling::ss:Cell[following-sibling::ss:Cell[generate-id() = $id]]) + number($el/@ss:Index) + 1" />
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="position()" />
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:variable name="name">
			<xsl:if test="$columns">
				<xsl:value-of select="$columns/Cell[@index = $index]" />
			</xsl:if>
		</xsl:variable>
		<xsl:if test="not($columns) or ($columns and $name != '')">
			<Cell index="{ $index }">
				<xsl:if test="$columns">
					<xsl:attribute name="name">
						<xsl:value-of select="$name" />
					</xsl:attribute>
				</xsl:if>
				<xsl:value-of select="normalize-space(ss:Data/text())" />
			</Cell>
		</xsl:if>
	</xsl:template>

	<xsl:template match="Row"> <!-- process each row. 
		The variables are assigned using the column names from the second spreadsheet in the source workbook -->
		<xsl:variable name="ConceptID" select="normalize-space(Cell[@name = 'CGI_URN'])" />
		<xsl:variable name="Name" select="normalize-space(Cell[@name = 'Term'])" />
		<xsl:variable name="Definition" select="normalize-space(Cell[@name = 'Definition'])" />
		<xsl:variable name="SourceNote" select="normalize-space(Cell[@name = 'SourceNote'])" />
		<xsl:variable name="HKey" select="normalize-space(Cell[@name = 'Hkey'])" />
		<xsl:variable name="Parent_ID" select="normalize-space(Cell[@name = 'Parent_URN'])" />

		<xsl:if test="$ConceptID"> <!--check for invalid row; there must be a conceptID if its valid -->
		<skos:Concept rdf:about="{ concat($Classifier_Prefix,':', $Version, ':',  $ConceptID) }">
			<skos:inScheme rdf:resource="{ concat($ClassifierScheme_URN,':',$Version) }" />
			<skos:definition>
				<xsl:value-of select="$Definition" />
			</skos:definition>
			<skos:prefLabel xml:lang="en">
				<xsl:value-of select="$Name" />
			</skos:prefLabel>
			<skos:notation rdf:datatype="{ concat($ClassifierScheme_URN,':',$Version) }">
				<xsl:value-of select="$ConceptID" />
			</skos:notation>
			<xsl:if test="$Parent_ID"> 
			<skos:broader rdf:resource="{ concat($Classifier_Prefix,':',$Version,':',$Parent_ID) }"/>
			</xsl:if> 
			<xsl:if test="$HKey">
				<skos:notation rdf:datatype="LocalHierarchyKey">
				<xsl:value-of select="$HKey" />
			</skos:notation>
			</xsl:if>
			<xsl:if test="$SourceNote">
				<skos:historyNote>
				<xsl:value-of select="$SourceNote" />
			</skos:historyNote>
			</xsl:if>
		</skos:Concept>
		</xsl:if>	
	</xsl:template>
</xsl:stylesheet>
